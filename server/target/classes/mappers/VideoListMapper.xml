<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="com.SOOKTUBE.dao.VideoListDAO">



			<insert id="newList"
		            parameterType="com.SOOKTUBE.model.VideoListDTO">
		        INSERT INTO videoList(`listID`, `videoID`, `username`)
		        VALUES (#{listID}, #{videoID}, #{username})
		    </insert>
		    
		    <insert id="newListInfo"
		            parameterType="com.SOOKTUBE.model.VideoListDTO"
		            useGeneratedKeys="true"
            		keyProperty="listID">
		        INSERT INTO listInfo(`listName`, `listDesc`, `isPublic`, `thumbnail`, `username`)
		        VALUES (#{listName}, #{listDesc}, #{isPublic},  #{thumbnail}, #{username})
		    </insert>
	
		    
		    <select id="getVideoList"
		    resultType="com.SOOKTUBE.model.VideoListDTO">
    		
			SELECT 
			     `listID`, `listName`, `listDesc`, `username`, `isPublic`, `thumbnail`, `copied`
			FROM listInfo
    		
    		</select>

		    <select id="getVideoListOrderby"
		    resultType="com.SOOKTUBE.model.VideoListDTO">
    		
			SELECT 
			     `listID`, `listName`, `listDesc`, `username`, `isPublic`, `thumbnail`, `copied`, `like`
			FROM listInfo
			
    		ORDER BY
        		<choose>
            		<when test="order == 'listID'">
                		`listID`
            		</when>
            		<when test="order == 'like'">
                		`like`
            		</when>

        		</choose>
       		DESC
       		<choose>
       		
       			<when test="order == 'like'">
       				, `listID`
       				DESC
       			</when>
       		</choose>
    		
    		<if test='limit != null and offset != null'>
    		LIMIT #{limit} OFFSET #{offset}
    		</if>
    		    		
    		</select>
    		
    		<select id="getVideoListbyID"
    		parameterType="Integer"
		    resultType="com.SOOKTUBE.model.VideoListDTO">
    		
			SELECT 
			     `listID`, `listName`, `listDesc`, `username`, `isPublic`, `thumbnail`, `copied`
			FROM listInfo
			WHERE listInfo.`listID` = #{listID}

    		
    		</select>
    		
    		<select id="getVideoListbyUser"
    		parameterType="String"
		    resultType="com.SOOKTUBE.model.VideoListDTO">
    		
			SELECT 
			     `listID`, `listName`, `listDesc`, `username`, `isPublic`, `thumbnail`, `copied`, `like`
			FROM listInfo
			WHERE listInfo.`username` = #{username}
			
    		ORDER BY
        		<choose>
            		<when test="order == 'listID'">
                		`listID`
            		</when>
            		<when test="order == 'like'">
                		`like`
            		</when>

        		</choose>
       		DESC
       		<choose>
       		
       			<when test="order == 'like'">
       				, `listID`
       				DESC
       			</when>
       		</choose>
    		
    		<if test='limit != null and offset != null'>
    		LIMIT #{limit} OFFSET #{offset}
    		</if>

    		
    		</select>


    		<select id="getVideoListbyVideoID"
    		parameterType="Integer"
		    resultType="com.SOOKTUBE.model.VideoListDTO">
    		
			SELECT videoList.`listID`, videoList.`videoID`, `listName`, `listDesc`, videoList.`username`, `isPublic`, `thumbnail`, videoList.`like`, videoList.`dislike`, `copied`
			FROM videoList, listInfo
			WHERE videoList.`listID` = #{listID}
			AND `videoID` = #{videoID}
			AND videoList.`listID` = listInfo.`listID`

    		
    		</select>
    		
    		 
    		<select id="getListbyID"
    		parameterType="Integer"
		    resultType="com.SOOKTUBE.model.VideoListDTO">
    		
			SELECT DISTINCT
			     videoList.`listID`, `listName`, `listDesc`, videoList.`username`, `isPublic`, `thumbnail`, `copied`
			FROM videoList, listInfo
			WHERE videoList.`listID` = #{listID}

    		
    		</select> 
 
    		
    		<select id="getFileNamebylistID"
    		parameterType="Integer"
		    resultType="String">
    		
			SELECT `uploadFileName`
			FROM videoList, VIDEO
			WHERE `listID` = #{listID}
				AND
					videoList.`videoID` = VIDEO.`videoID`
    		
    		</select>


    		<select id="getFileNamebylistIDGTEQ5"
    		parameterType="Integer"
		    resultType="String">
    		
			SELECT `uploadFileName`
			FROM videoList, VIDEO
			WHERE `listID` = #{listID}
				AND
					videoList.`videoID` = VIDEO.`videoID`
				AND videoList.`like` + videoList.`dislike` &gt;= 5
    		
    		</select>

    		<select id="getFileNamebylistIDbetween0and5"
    		parameterType="Integer"
		    resultType="String">
    		
			SELECT `uploadFileName`
			FROM videoList, VIDEO
			WHERE `listID` = #{listID}
				AND
					videoList.`videoID` = VIDEO.`videoID`
				AND videoList.`like` + videoList.`dislike` BETWEEN 0 AND 4
    		
    		</select>

    		<select id="getFileNamebylistName"
    		parameterType="String"
		    resultType="String">
    		
			SELECT `uploadFileName`
			FROM videoList, VIDEO, listInfo
			WHERE `listName` = #{listName}
				AND
					videoList.`listID` = listInfo.`listID`
				AND
					videoList.`videoID` = VIDEO.`videoID`
    		
    		</select>
    		
    		    		
    	<select id="searchListbyTitle"
    			parameterType="String"
    			resultType="com.SOOKTUBE.model.VideoListDTO">
    			
    			SELECT `listID`, `listName`, `listDesc`, listInfo.`username`, `isPublic`, `thumbnail`, `copied`, `like`
    			FROM listInfo
    			WHERE `listName` LIKE CONCAT('%',#{listName},'%')
    			
	    		ORDER BY
	        		<choose>
	            		<when test="order == 'listID'">
	                		`listID`
	            		</when>
	            		<when test="order == 'like'">
	                		`like`
	            		</when>
	
	        		</choose>
	       		DESC
	       		<choose>
	       		
	       			<when test="order == 'like'">
	       				, `listID`
	       				DESC
	       			</when>
	       		</choose>
	    		
	    		<if test='limit != null and offset != null'>
	    		LIMIT #{limit} OFFSET #{offset}
	    		</if>

    			
    			</select>  
    			
    	<select id="getUsernameofList"
    			parameterType="Integer"
    			resultType="String">
    			
    			SELECT `username`
    			FROM listInfo
    			WHERE `listID` = #{listID}
    			
    			</select>
    			
		
    		
    		
<!--     		<insert id="newVideo"
            parameterType="com.SOOKTUBE.model.VideoDTO"
            useGeneratedKeys="true"
            keyProperty="videoID">
		        INSERT INTO videoList(`videoTitle`, `videoDesc`, `videoDate`, `username`, `uploadFileName`)
		        VALUES (#{videoTitle}, #{videoDesc}, #{videoDate}, #{username}, #{uploadFileName})
		    </insert> -->
		    
		    

		    
		    
    	    <update id="editLike" parameterType="int">
		        UPDATE videoList
		           SET `like` = `like` + 1
		         WHERE `listID` = #{listID}
		         AND `videoID` = #{videoID}
		    </update>

    	    <update id="editDislike" parameterType="int">
		        UPDATE videoList
		           SET `dislike` = `dislike` - 1
		         WHERE `listID` = #{listID}
		         AND `videoID` = #{videoID}
		    </update>

    	    <update id="editLikeSet5" parameterType="int">
		        UPDATE videoList
		           SET `like` = 10
		         WHERE `listID` = #{listID}
		         AND `videoID` = #{videoID}
		    </update>
		    
		        	    <update id="revertRecommend" parameterType="int">
		        UPDATE videoList
		           SET `like` = `like` - 1
		         WHERE `listID` = #{listID}
		         AND `videoID` = #{videoID}
		    </update>
		    
		        	    <update id="revertDisrecommend" parameterType="int">
		        UPDATE videoList
		           SET `dislike` = `dislike` + 1
		         WHERE `listID` = #{listID}
		         AND `videoID` = #{videoID}
		    </update>
		    

    <delete id="deleteVideoFromlist">
    	DELETE FROM videoList
    	WHERE videoID = #{videoID}
    	AND listID = #{listID}
    </delete>

    <delete id="deleteVideolist">
    	DELETE FROM listInfo
    	WHERE listID = #{listID}
    </delete>
    
    <update id="updatelistDesc" parameterType="com.SOOKTUBE.model.VideoListDTO">
    
    UPDATE listInfo
    	SET `listName` = #{listName}
    	, `listDesc` = #{listDesc}
    	, `isPublic` = #{isPublic}
    	, `thumbnail` = #{thumbnail}
    	
    	WHERE `listID` = #{listID}
    
    </update>

</mapper>